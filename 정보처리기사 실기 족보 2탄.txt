-- [정보처리기사 실기 족보 2탄]

--- 01. 리팩토링의 목적
	> 유지보수성 향상 : 복잡한 코드의 단순화, 소스의 가독성 향상
	> 유연한 시스템 : 소프트웨어 요구사항 변경에 유연한 대응
	> 생산성 향상 : 정제 및 최적화된 소스의 재사용
	> 품질 향상 : 소프트웨어 오류발견이 용이하여 품질향상

	* 리팩토링은 소프트웨어 모듈의 외부적 기능은 수정하지 않고 내부적으로 구조, 관계 등을
	  단순화하여 소프트웨어의 유지보수성을 향상시키는 기법이다.

--- 02. OSPF 의 특징
	> 다익스트라 알고리즘 사용 : 다익스트라 알고리즘을 사용하는 내부 라우팅 프로토콜
	> 라우팅 메트릭 지정 : 최조, 지연, 최대 처리량 등 관리자가 라우팅 메트릭 지정
	> AS 분할 사용 : 자치 시스템을 지역으로 나누어 라우팅을 효과적으로 관리
	> 홉 카운트 무제한 : 홉 카운트에 제한이 없음
	
	* OSPF : Open Shortest Path First 는 대표적인 내부 라우팅 프로토콜로 다익스트라 알고리즘을
	         이용한 대규모 네트워크에 적합한 링크 상태 라우팅 프로토콜로도 불리는
	         라우팅 프로토콜 OSPF 이다.

--- 03. ICMP(Internet Control Message Protocol)
	> IP 패킷을 처리할 때 발생하는 문제를 알려주는 프로토콜로, 메세지 형식은 8비트의 헤더와 가변 길이의
	  데이터 영역으로 분리되어 있음



--- 04. 식별자 표기법
	> 카멜 표기법 : 식별자 표기 시에 여러 단어가 이어지면 첫 단어 시작만 소문자로 표시하고, 각 단어의 첫 글자는
			대문자로 지정하는 표기법(ex : goodMan)

	> 파스칼 표기법 : 식별자 표기 시에 여러 단어가 이어지면 각 단어의 첫 글자는 대문자로 지정하는 표기법
			  (ex: GoodMan)

	> 스네이크 표기법 : 식별자 표기 시에 여러 단어가 이어지면 단어 사이에 언더 바를 넣는 표기법
			    (ex : good_man)

	> 헝가리안 표기법 : 식별자 표기 시 두어에 자료형을 붙이는 표기법
			    (ex : strGoodMan : 문자열)

--- 05. 블랙박스 테스트의 유형
        ---------------
		└> 소프트웨어 검사 방법 중 하나로 어떤 소프트웨어를 내부 구조나 작동 원리를 모르는 상태에서 소프트웨어의 동작을
		   검사하는 방법이다.


	> 동등분할 테스트 : 입력 데이터의 영역을 유사한 도메인별로 유효 값 / 무효 값을 그룹핑하여 대푯값 테스트 케이스를
			    도출하여 테스트하는 기법
	> 경곗값 분석 테스트 : 등가 분할 후 경곗값 부분에서 오류 발생 확률이 높기 때문에 경곗값을 포함하여
			       테스트 케이스를 설계하여 테스트하는 기법

	> 결정 테이블 테스트 : 요구사항의 논리와 발생 조건을 테이블 형태로 나열하여 조건과 행위를 모두 조합하여 테스트하는 기법

	> 상태 전이 테스트 : 테스트 대상, 시스템이나 객체의 상태를 구분하고 이벤트에 의해 어느 한 상태에서 다른 상태로 전이 되는
			     경우의 수를 수행하는 테스트 기법

	> 유스케이스 테스트 : 시스템이 실제 사용되는 유스케이스로 모델링 되어있을 때 프로세스 흐름을 기반으로 테스트 케이스를 명세화하여
			      수행하는 테스트 기법

	> 분류 트리 테스트 : SW의 일부 또는 전체를 트리 구조로 분석 및 표현하여 테스트 케이스를 설계하여 테스트하는 기법

	> 페어와이즈 테스트 : 테스트 데이터값 간에 최소한 한번씩 조합하는 방식

	> 원인-결과 그래프 테스트 : 그래프를 활용하여 입력 데이터 간의 관계 및 출력에 미치는 영향을 분석하여 효용성이 높은
				    테스트 케이스를 선정하여 테스트하는 기법

	> 비교 테스트 : 여러 버전의 프로그램에 같은 입력값을 넣어서 동일한 결과 데이터가 나오는지 비교해 보는 테스트 기법

--- 06. EAI 의 구축 유형
	> 포인트 투 포인트 : 가장 기초적인 애플리케이션 통합방법으로 1:1 단순 통합방법
	> 허브 앤 스포크 : 단일한 접점의 허브 시스템을 통하여 데이터를 전송하는 중앙 집중식 방식
	> 메시지 버스 : 애플리케이션 사이 미들웨어(버스)를 두어 연계하는 미들웨어 통합 바식
	> 하이브리드 : 그룹 내부는 허브 앤 스포크 방식을 사용하고, 그룹 간에는 메세지 버스 방식을 사용하는 통합 방식

	  * EAI : Enterprise Application Integration 이란 기업 응용 프로그램의 구조적 통합 방안을 가리킵니다.

--- 07. IPv4 주소
	> 주소체계는 10진수로 총 12자리이며, 네 부분으로 나뉜다.
	> 각 부분은 0~255까지 3자리의 수로 표현된다.
	> IPv4 주소는 32bit 로 구성되어 있으며, 인터넷 사용자의 증가로 인해 주소 공간의 고갈로 128bit
	  주소체계를 갖는 IPv6 가 등장하고 점점 확산되고 있다.

--- 08. IPv6 주소
	> IPv4의 기존 32bit 주소 공간에서 벗어나, IPv6 는 128bit 주소 공간을 제공하고, IPv6는 네트워크의
	  물리적 위치에 제한받지 않고 같은 주소를 유지한다.

--- 09. 디자인 패턴의 유형
	> 목적
	   - 생성 : 객체 인스턴스 생성에 관여, 클래스 정의와 객체 생성 방식을 구조화, 캡슐화를 수행하는 패턴
	   - 구조 : 더 큰 구조 형성 목적으로 클래스나 객체의 조합을 다루는 패턴
	   - 행위 : 클래스나 객체들이 상호작용하는 방법과 역할 분담을 다루는 패턴

	> 범위
	   - 클래스 : 클래스 간 관련성 / 컴파일 타임에 정적으로 결정
	   - 객체 : 객체 간 관련성을 다루는 패턴 / 런타임에 동적으로 결정













